#!/bin/bash

# PROJECTPATH contains the full
# directory path of the project itself
PROJECTPATH=$(pwd)

# SCRIPTNAME contains the name
# of the current script (e.g. "server")
SCRIPTNAME="bin/$(basename $0)"

# Check availability of docker
hash docker 2>/dev/null || { echo >&2 "warp framework requires \"docker\""; exit 1; }

# Check availability of docker-compose
hash docker-compose 2>/dev/null || { echo >&2 "warp framework requires \"docker-compose\""; exit 1; }

# Check availability of ed
hash ed 2>/dev/null || { echo >&2 "warp framework requires \"ed command\". On debian install it running \"sudo apt-get install ed\""; exit 1; }

case "$(uname -s)" in
    Darwin)
    # autodetect docker in Mac
    # Check availability of docker-sync
    hash docker-sync 2>/dev/null || { echo >&2 "warp framework requires \"docker-sync\""; exit 1; }
    ;;
esac    

include_warp_framework() {
    
    # INCLUDE VARIABLES
    . "$PROJECTPATH/.warp/variables.sh"
    # INCLUDE WARP FRAMEWORK
    . "$PROJECTPATH/.warp/includes.sh"
}

if [ -d $PROJECTPATH/.warp ]; then
    include_warp_framework
fi;



setup_main() {

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        setup_help_usage
        exit 1
    else
        if [ ! -d $PROJECTPATH/.warp ]; then
            warp_setup install
            exit 0;
        fi;

        init_main init
    fi
}

setup_help_usage()
{
    if [ -d $PROJECTPATH/.warp ]; then
        init_help_usage
        exit 1
    else

        echo "  if you run for the first time, the installation of the framework begins"
        echo "  After the initial installation, a guided menu with options to create services"
        echo "  The following services can be configured:"
        echo "  1) Web Server with Nginx"
        echo "  2) PHP Service"
        echo "  3) Database with MySQL"
        echo "  4) Service of elasticsearch"
        echo "  5) Redis service for cache, session, fpc"
        echo "  6) Rabbit service"
        echo "  "
        echo "  If the program detects a previous configuration, it shows a shorter menu of options, to configure:"
        echo "  1) Work with one or more projects in parallel"
        echo "  2) Configure MySQL ports"
        echo "  "
        echo "  Please run ./warp init"

        exit 1
    fi
}

help() {
    
    if [ -d $PROJECTPATH/.warp ]; then
        warp_banner

        . $PROJECTPATH/.warp/bin/help.sh

        help_main

        for filename in $PROJECTPATH/.warp/bin/*_help.sh; do
            . "$filename"
            $(basename $filename .sh) # execute default function
        done

        help_usage
    else
        warp_message_not_install_yet
    fi;
}

warp_message_not_install_yet()
{
    echo "WARP-ENGINE has not been installed yet."
    echo "Please run ./warp init or ./warp init --help"
}

warp_update()
{
    if [ ! -d $PROJECTPATH/.warp ]; then
        warp_message_not_install_yet
        exit 0;
    fi;

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
        . "$PROJECTPATH/.warp/bin/update_help.sh"
        update_help_usage
        exit 1;
    fi

    warp_setup update
}

#######################################
# Print the usage information for the
# server control script
# Globals:
#   SCRIPTNAME
# Arguments:
#   None
# Returns:
#   None
#######################################
usage() {
  echo "Utility for controlling dockerized Web projects\n"
  echo "Usage:\n\n  $SCRIPTNAME <action> [options...] <arguments...>"
  echo ""
}


function warp_info()
{

    # IMPORT HELP

    . "$PROJECTPATH/.warp/bin/info_help.sh"

    if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then  
        info_help_usage
        exit 1;
    fi;    

    if ! warp_check_env_file ; then
        warp_message_error "file not found $(basename $ENVIRONMENTVARIABLESFILE)"
        exit
    fi; 

    if [ "$1" = "--ip" ] ; then
        if [ $(warp_check_is_running) = false ]; then
            warp_message_error "The containers are not running"
            warp_message_error "please, first run warp start"

            exit 1;
        fi

        docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}   {{.Name}}'   $(docker-compose -f  $DOCKERCOMPOSEFILE ps -q) | sed 's/ \// /'
    else
        mysql_main info   
        webserver_main info   
        php_main info   
        elasticsearch_main info   
        redis_main info   
        rabbit_main info   
        mailhog_main info   
    fi;
}

function warp_setup()
{
    # Create destination folder
    DESTINATION="."
    #mkdir -p ${DESTINATION}

    OPTION=$1

    # Find __ARCHIVE__ maker, read archive content and decompress it
    ARCHIVE=$(awk '/^__ARCHIVE__/ {print NR + 1; exit 0; }' "${0}")

    tail -n+${ARCHIVE} "${0}" | tar xpJ -C ${DESTINATION}

    if [ "$OPTION" = "install" ]
    then
        if [ -d $PROJECTPATH/.warp ]; then    
            echo "Installing Warp, wait a few moments"
            sleep 1
            echo "Successful installation!, starting configurations.."
            sleep 1
            # Init Instalation
            include_warp_framework
            init_main init
        fi
    elif [ "$OPTION" = "update" ]
    then
        while : ; do
            respuesta=$( warp_question_ask_default "Are you sure to update Warp Framework? $(warp_message_info [Y/n]) " "Y" )
            if [ "$respuesta" = "Y" ] || [ "$respuesta" = "y" ] || [ "$respuesta" = "N" ] || [ "$respuesta" = "n" ] ; then
                break
            else
                warp_message_warn "Incorrect answer, you must select between two options: $(warp_message_info [Y/n]) "
            fi
        done

        if [ "$respuesta" = "Y" ] || [ "$respuesta" = "y" ]
        then
            echo "Updating Warp, wait a few moments"
            sleep 1
            echo "Successful update!"
            sleep 1
            # Init Instalation
            include_warp_framework
            warp_banner
        fi
    fi
}

case "$1" in
    init)
    shift 1
    setup_main  $*
    ;;

    mysql)
    shift 1
    mysql_main $*
    ;;

    php)
    shift 1
    php_main $*
    ;;

    start)
    start_main $*
    ;;

    fix)
    fix_main $*
    ;;

    restart)
    restart_main $*
    ;;

    stop)
    stop_main $*
    ;;

    ps)
    ps_main $*
    ;;

    info)
    shift 1
    warp_info $*
    ;;

    composer)
    composer_main $*
    ;;

    magento)
    magento_main $*
    ;;

    crontab)
    crontab_main $*
    ;;

    npm)
    npm_main $*
    ;;

    grunt)
    grunt_main $*
    ;;

    logs)
    logs_main $*
    ;;

    elasticsearch)
    shift 1
    elasticsearch_main $*
    ;;

    redis)
    shift 1
    redis_main $*
    ;;

    rabbit)
    shift 1
    rabbit_main $*
    ;;

    mailhog)
    shift 1
    mailhog_main $*
    ;;

    reset)
    reset_main $*
    ;;

    update)
    shift 1
    warp_update $*
    ;;

    *)
    help
    ;;
esac

exit 0

__ARCHIVE__
